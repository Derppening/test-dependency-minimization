package com.derppening.researchprojecttoolkit.visitor

import com.github.javaparser.ast.*
import com.github.javaparser.ast.body.*
import com.github.javaparser.ast.comments.BlockComment
import com.github.javaparser.ast.comments.JavadocComment
import com.github.javaparser.ast.comments.LineComment
import com.github.javaparser.ast.expr.*
import com.github.javaparser.ast.modules.*
import com.github.javaparser.ast.stmt.*
import com.github.javaparser.ast.type.*
import com.github.javaparser.ast.visitor.GenericVisitor

/**
 * A visitor which leaves all [visit] implementations empty for implementing classes to implement.
 */
interface GenericUnimplementedVisitor<R, A> : GenericVisitor<R, A> {

    private fun visit(n: Node): R = TODO("visit() for node type ${n::class.simpleName} not yet implemented")

    override fun visit(n: NodeList<*>, arg: A): R = TODO("visit() for node type ${n::class.simpleName} not yet implemented")

    override fun visit(n: CompilationUnit, arg: A): R = visit(n as Node)
    override fun visit(n: PackageDeclaration, arg: A): R = visit(n as Node)
    override fun visit(n: TypeParameter, arg: A): R = visit(n as Node)
    override fun visit(n: LineComment, arg: A): R = visit(n as Node)
    override fun visit(n: BlockComment, arg: A): R = visit(n as Node)
    override fun visit(n: ClassOrInterfaceDeclaration, arg: A): R = visit(n as Node)
    override fun visit(n: RecordDeclaration, arg: A): R = visit(n as Node)
    override fun visit(n: CompactConstructorDeclaration, arg: A): R = visit(n as Node)
    override fun visit(n: EnumDeclaration, arg: A): R = visit(n as Node)
    override fun visit(n: EnumConstantDeclaration, arg: A): R = visit(n as Node)
    override fun visit(n: AnnotationDeclaration, arg: A): R = visit(n as Node)
    override fun visit(n: AnnotationMemberDeclaration, arg: A): R = visit(n as Node)
    override fun visit(n: FieldDeclaration, arg: A): R = visit(n as Node)
    override fun visit(n: VariableDeclarator, arg: A): R = visit(n as Node)
    override fun visit(n: ConstructorDeclaration, arg: A): R = visit(n as Node)
    override fun visit(n: MethodDeclaration, arg: A): R = visit(n as Node)
    override fun visit(n: Parameter, arg: A): R = visit(n as Node)
    override fun visit(n: InitializerDeclaration, arg: A): R = visit(n as Node)
    override fun visit(n: JavadocComment, arg: A): R = visit(n as Node)
    override fun visit(n: ClassOrInterfaceType, arg: A): R = visit(n as Node)
    override fun visit(n: PrimitiveType, arg: A): R = visit(n as Node)
    override fun visit(n: ArrayType, arg: A): R = visit(n as Node)
    override fun visit(n: ArrayCreationLevel, arg: A): R = visit(n as Node)
    override fun visit(n: IntersectionType, arg: A): R = visit(n as Node)
    override fun visit(n: UnionType, arg: A): R = visit(n as Node)
    override fun visit(n: VoidType, arg: A): R = visit(n as Node)
    override fun visit(n: WildcardType, arg: A): R = visit(n as Node)
    override fun visit(n: UnknownType, arg: A): R = visit(n as Node)
    override fun visit(n: ArrayAccessExpr, arg: A): R = visit(n as Node)
    override fun visit(n: ArrayCreationExpr, arg: A): R = visit(n as Node)
    override fun visit(n: ArrayInitializerExpr, arg: A): R = visit(n as Node)
    override fun visit(n: AssignExpr, arg: A): R = visit(n as Node)
    override fun visit(n: BinaryExpr, arg: A): R = visit(n as Node)
    override fun visit(n: CastExpr, arg: A): R = visit(n as Node)
    override fun visit(n: ClassExpr, arg: A): R = visit(n as Node)
    override fun visit(n: ConditionalExpr, arg: A): R = visit(n as Node)
    override fun visit(n: EnclosedExpr, arg: A): R = visit(n as Node)
    override fun visit(n: FieldAccessExpr, arg: A): R = visit(n as Node)
    override fun visit(n: InstanceOfExpr, arg: A): R = visit(n as Node)
    override fun visit(n: StringLiteralExpr, arg: A): R = visit(n as Node)
    override fun visit(n: IntegerLiteralExpr, arg: A): R = visit(n as Node)
    override fun visit(n: LongLiteralExpr, arg: A): R = visit(n as Node)
    override fun visit(n: CharLiteralExpr, arg: A): R = visit(n as Node)
    override fun visit(n: DoubleLiteralExpr, arg: A): R = visit(n as Node)
    override fun visit(n: BooleanLiteralExpr, arg: A): R = visit(n as Node)
    override fun visit(n: NullLiteralExpr, arg: A): R = visit(n as Node)
    override fun visit(n: MethodCallExpr, arg: A): R = visit(n as Node)
    override fun visit(n: NameExpr, arg: A): R = visit(n as Node)
    override fun visit(n: ObjectCreationExpr, arg: A): R = visit(n as Node)
    override fun visit(n: ThisExpr, arg: A): R = visit(n as Node)
    override fun visit(n: SuperExpr, arg: A): R = visit(n as Node)
    override fun visit(n: UnaryExpr, arg: A): R = visit(n as Node)
    override fun visit(n: VariableDeclarationExpr, arg: A): R = visit(n as Node)
    override fun visit(n: MarkerAnnotationExpr, arg: A): R = visit(n as Node)
    override fun visit(n: SingleMemberAnnotationExpr, arg: A): R = visit(n as Node)
    override fun visit(n: NormalAnnotationExpr, arg: A): R = visit(n as Node)
    override fun visit(n: MemberValuePair, arg: A): R = visit(n as Node)
    override fun visit(n: ExplicitConstructorInvocationStmt, arg: A): R = visit(n as Node)
    override fun visit(n: LocalClassDeclarationStmt, arg: A): R = visit(n as Node)
    override fun visit(n: LocalRecordDeclarationStmt, arg: A): R = visit(n as Node)
    override fun visit(n: AssertStmt, arg: A): R = visit(n as Node)
    override fun visit(n: BlockStmt, arg: A): R = visit(n as Node)
    override fun visit(n: LabeledStmt, arg: A): R = visit(n as Node)
    override fun visit(n: EmptyStmt, arg: A): R = visit(n as Node)
    override fun visit(n: ExpressionStmt, arg: A): R = visit(n as Node)
    override fun visit(n: SwitchStmt, arg: A): R = visit(n as Node)
    override fun visit(n: SwitchEntry, arg: A): R = visit(n as Node)
    override fun visit(n: BreakStmt, arg: A): R = visit(n as Node)
    override fun visit(n: ReturnStmt, arg: A): R = visit(n as Node)
    override fun visit(n: IfStmt, arg: A): R = visit(n as Node)
    override fun visit(n: WhileStmt, arg: A): R = visit(n as Node)
    override fun visit(n: ContinueStmt, arg: A): R = visit(n as Node)
    override fun visit(n: DoStmt, arg: A): R = visit(n as Node)
    override fun visit(n: ForEachStmt, arg: A): R = visit(n as Node)
    override fun visit(n: ForStmt, arg: A): R = visit(n as Node)
    override fun visit(n: ThrowStmt, arg: A): R = visit(n as Node)
    override fun visit(n: SynchronizedStmt, arg: A): R = visit(n as Node)
    override fun visit(n: TryStmt, arg: A): R = visit(n as Node)
    override fun visit(n: CatchClause, arg: A): R = visit(n as Node)
    override fun visit(n: LambdaExpr, arg: A): R = visit(n as Node)
    override fun visit(n: MethodReferenceExpr, arg: A): R = visit(n as Node)
    override fun visit(n: TypeExpr, arg: A): R = visit(n as Node)
    override fun visit(n: Name, arg: A): R = visit(n as Node)
    override fun visit(n: SimpleName, arg: A): R = visit(n as Node)
    override fun visit(n: ImportDeclaration, arg: A): R = visit(n as Node)
    override fun visit(n: ModuleDeclaration, arg: A): R = visit(n as Node)
    override fun visit(n: ModuleRequiresDirective, arg: A): R = visit(n as Node)
    override fun visit(n: ModuleExportsDirective, arg: A): R = visit(n as Node)
    override fun visit(n: ModuleProvidesDirective, arg: A): R = visit(n as Node)
    override fun visit(n: ModuleUsesDirective, arg: A): R = visit(n as Node)
    override fun visit(n: ModuleOpensDirective, arg: A): R = visit(n as Node)
    override fun visit(n: UnparsableStmt, arg: A): R = visit(n as Node)
    override fun visit(n: ReceiverParameter, arg: A): R = visit(n as Node)
    override fun visit(n: VarType, arg: A): R = visit(n as Node)
    override fun visit(n: Modifier, arg: A): R = visit(n as Node)
    override fun visit(n: SwitchExpr, arg: A): R = visit(n as Node)
    override fun visit(n: YieldStmt, arg: A): R = visit(n as Node)
    override fun visit(n: TextBlockLiteralExpr, arg: A): R = visit(n as Node)
    override fun visit(n: PatternExpr, arg: A): R = visit(n as Node)
}