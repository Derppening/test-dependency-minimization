diff --git a/tools/ResearchProjectToolkit/javaparser/javaparser-core/src/main/java/com/github/javaparser/resolution/types/parametrization/ResolvedTypeParameterValueProvider.java b/tools/ResearchProjectToolkit/javaparser/javaparser-core/src/main/java/com/github/javaparser/resolution/types/parametrization/ResolvedTypeParameterValueProvider.java
index 96b8f527..c5a4de82 100644
--- a/tools/ResearchProjectToolkit/javaparser/javaparser-core/src/main/java/com/github/javaparser/resolution/types/parametrization/ResolvedTypeParameterValueProvider.java
+++ b/tools/ResearchProjectToolkit/javaparser/javaparser-core/src/main/java/com/github/javaparser/resolution/types/parametrization/ResolvedTypeParameterValueProvider.java
@@ -42,6 +42,8 @@ public interface ResolvedTypeParameterValueProvider {
      * has a value.
      */
     default ResolvedType useThisTypeParametersOnTheGivenType(ResolvedType type) {
+        final ResolvedType origType = type;
+
         if (type.isTypeVariable()) {
             ResolvedTypeParameterDeclaration typeParameter = type.asTypeParameter();
             if (typeParameter.declaredOnType()) {
@@ -52,9 +54,12 @@ public interface ResolvedTypeParameterValueProvider {
             }
         }
         if (type.isWildcard() && type.asWildcard().isBounded()) {
-            if (type.asWildcard().isExtends()) {
-                return ResolvedWildcard.extendsBound(useThisTypeParametersOnTheGivenType(type.asWildcard().getBoundedType()));
+            ResolvedType boundedType = type.asWildcard().getBoundedType();
+            if (boundedType.isTypeVariable() && origType.isTypeVariable() && boundedType.asTypeParameter().getQualifiedName().equals(origType.asTypeParameter().getQualifiedName())) {
+                return ResolvedWildcard.UNBOUNDED;
+            } else if (type.asWildcard().isExtends()) {
+                return ResolvedWildcard.extendsBound(useThisTypeParametersOnTheGivenType(boundedType));
             } else {
-                return ResolvedWildcard.superBound(useThisTypeParametersOnTheGivenType(type.asWildcard().getBoundedType()));
+                return ResolvedWildcard.superBound(useThisTypeParametersOnTheGivenType(boundedType));
             }
         }
 
