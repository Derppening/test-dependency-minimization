diff --git a/tools/ResearchProjectToolkit/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javassistmodel/JavassistAnnotationMemberDeclaration.java b/tools/ResearchProjectToolkit/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javassistmodel/JavassistAnnotationMemberDeclaration.java
index 97b9450..6df1d8d 100644
--- a/tools/ResearchProjectToolkit/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javassistmodel/JavassistAnnotationMemberDeclaration.java
+++ b/tools/ResearchProjectToolkit/javaparser/javaparser-symbol-solver-core/src/main/java/com/github/javaparser/symbolsolver/javassistmodel/JavassistAnnotationMemberDeclaration.java
@@ -27,6 +27,7 @@ import com.github.javaparser.resolution.declarations.ResolvedAnnotationMemberDecla
 import com.github.javaparser.resolution.declarations.ResolvedReferenceTypeDeclaration;
 import com.github.javaparser.resolution.model.SymbolReference;
 import com.github.javaparser.resolution.model.typesystem.ReferenceTypeImpl;
+import com.github.javaparser.resolution.types.ResolvedPrimitiveType;
 import com.github.javaparser.resolution.types.ResolvedType;
 import javassist.CtMethod;
 import javassist.bytecode.AnnotationDefaultAttribute;
@@ -76,10 +76,19 @@ public class JavassistAnnotationMemberDeclaration implements ResolvedAnnotationM
         try {
             String descriptor = annotationMember.getMethodInfo().getDescriptor();
             SignatureAttribute.MethodSignature signature = SignatureAttribute.toMethodSignature(descriptor);
-            SymbolReference<ResolvedReferenceTypeDeclaration> returnType = typeSolver.tryToSolveType(signature.getReturnType().jvmTypeName());
+            String returnTypeName = signature.getReturnType().jvmTypeName().replace('$', '.');
+            SymbolReference<ResolvedReferenceTypeDeclaration> returnType;
+            if (returnTypeName.endsWith("[]")) {
+                returnType = typeSolver.tryToSolveType(returnTypeName.substring(0, returnTypeName.length() - 2));
+            } else {
+                returnType = typeSolver.tryToSolveType(returnTypeName);
+            }
             if (returnType.isSolved()) {
                 return new ReferenceTypeImpl(returnType.getCorrespondingDeclaration());
             }
+            try {
+                return ResolvedPrimitiveType.byName(signature.getReturnType().jvmTypeName());
+            } catch (IllegalArgumentException ignored) {}
         } catch (BadBytecode e) {
             // We don't expect this to happen, but we handle it anyway.
             throw new IllegalStateException("An invalid descriptor was received from JavaAssist.", e);
